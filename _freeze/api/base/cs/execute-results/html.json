{
  "hash": "b93cab34b3b9eccac0713853185d25f3",
  "result": {
    "markdown": "---\ntitle: \"Coordinate Systems\"\n---\n\n::: {.callout-note appearance=\"simple\" icon=false}\n# ExESS API -- ``GlobalCartesianPosition``\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING: replacing module ExESS.\nWARNING: using ExESS.GlobalCartesianPosition in module Main conflicts with an existing identifier.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n[1] GlobalCartesianPosition(x::Real, y::Real, z::Real)\n[2] GlobalCartesianPosition(X::AbstractVector)\n[3] GlobalCartesianPosition(x::AbstractPosition)\n```\n\nThree dimensional, global, cartesian position vector [1]. Converts vector or other position type into `GlobalCartesianPosition` [2,3].\n\n```\n[1] GlobalCartesianPosition(sol::ODESolution, [idx::Integer])\n[2] GlobalCartesianPosition(sol::ODESolution, t::Real)\n[3] GlobalCartesianPosition(sol::ODESolution, t::AbstractVector)\n```\n\nExtracts `GlobalCartesianPosition` from `ODESolution` at given index, all indexes, time  or times. Note that this constructor assumes the solution object to be from a `SecondOrderODEProblem`, where the components of the solution vector are ordered as `[vx, vy, vz, x, y, z]`.\n\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "cs_files"
    ],
    "filters": [],
    "includes": {}
  }
}