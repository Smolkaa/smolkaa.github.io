---
title: "Distributions"
---

::: {.hidden }
# {{< meta title >}}
:::

---

## Type Structure

The following structure shows all currently implemented coordinates in `ExESS`:

```julia
ExESS
└─ AbstractDistribution
    └─ AbstractVelocityDistribution{S} where {S<:AbstractFloat}
        ├─ MaxwellBoltzmannVelocityDistribution{S} where {S<:AbstractFloat}
        └─ MaxwellBoltzmannFluxVelocityDistribution{S} where {S<:AbstractFloat}
```

Note that the velocity distributions are of subtype `AbstractFloat`.

## Usage 

### Velocity Distributions

For the theoretical description of the velocity distributions, please read the [documentation](/documentation/drivers/thermal_sorption.qmd#sec-velocity-distributions).

Generally, the two implemented velocity distributions can be created by calling the respective constructor with the respective temperature and mass as input arguments:

```julia
T, m = 250.0, amu2kg(4) # [K], [kg] (mass of helium)
vd_mb = MaxwellBoltzmannVelocityDistribution(T, m)
vd_mbf = MaxwellBoltzmannFluxVelocityDistribution(T, m)
```

```{julia}
#| output: false
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
T, m = 250.0, amu2kg(4) # [K], [kg] (mass of helium)
vd_mb = MaxwellBoltzmannVelocityDistribution(T, m)
vd_mbf = MaxwellBoltzmannFluxVelocityDistribution(T, m)
```

::: {.callout-note collapse="true" icon=false}

# Sampling

The distributions in themselves are only placeholders to be used in statistical calculations. The following code shows how one can sample a Maxwell-Boltzmann velocity distributions to obtain a velocity vector (`velocity`),

```{julia}
velocity(vd_mb)
```

a speed (`speed`),

```{julia}
speed(vd_mb)
```

 an azimuth angle (`azimuth`),

```{julia}
azimuth(vd_mb)
```

an elevation angle (`elevation`),

```{julia}
elevation(vd_mb)
```

 and a zenith angle (`zenith`).

```{julia}
zenith(vd_mb)
```

:::

::: {.callout-note collapse="true" icon=false}

# Cumulative Distribution Functions

Additionally, the cumulative distribution (CDF) of an existing distribution, in this case, the Maxwell-Boltzmann Flux velocity distribution, can be analyzed. Note that this also works for the velocity vector, as well as for each individual, spherical component, i.e. the azimuth, elevation, speed, and zenith. The CDF computes the accumulated likelihood that a given value falls into a range provided in the function call. For the example usage, firstly the ranges will be defined:

```{julia}
#| output: false
v1, v2 = 100.0, 200.0   # speed [m s-1]
az1, az2 = -pi/4, pi/2  # azimuth [rad]
el1, el2 = pi/6, pi/4   # elevation [ad]
ze1, ze2 = pi/4, pi/3   # zenith [rad]
```

Now the respective CDFs can be computed. The following examples use the Maxwell-Boltzmann Flux velocity distribution `vd_mbf`:

```{julia}
speed_cdf(vd_mbf, v1, v2), azimuth_cdf(vd_mbf, az1, az2), elevation_cdf(vd_mbf, el1, el2), zenith_cdf(vd_mbf, ze1, ze2)
```

Note that, disregarding the numerical inaccuracies, the zenith and elevation angle CDF is evaluating to the same probability, since the two angles are inherently connected through
\begin{equation}
    \zenith = \begin{cases} 
        \frac{\pi}{2} - \elevation & \;\text{for } \elevation \geq 0 \\
        -\frac{\pi}{2} - \elevation & \;\text{for } \elevation < 0
    \end{cases}
\end{equation}

Additionally, the CDF can also be calculated for two velocity vectors, $\vec\velocity_1$ (`v1`) and $\vec\velocity_2$ (`v2`). In this case, the two vectors are used to calculate the corresponding speed, azimuth, and elevation angle, and then multiply each individual CDF together. Thus the following CDF 

```{julia}
#| output: false
v1_mbf, v2_mbf = velocity(MaxwellBoltzmannFluxVelocityDistribution(T, m)), velocity(MaxwellBoltzmannFluxVelocityDistribution(T, m))
v1, v2 = speed(v1_mbf), speed(v2_mbf)
az1, az2 = azimuth(v1_mbf), azimuth(v2_mbf)
el1, el2 = elevation(v1_mbf), elevation(v2_mbf)
velocity_cdf(vd_mbf, v1_mbf, v2_mbf)
```
```{julia}
#| echo: false
abs.(velocity_cdf(vd_mbf, v1_mbf, v2_mbf))
```
:::



## API

::: {.callout-note appearance="simple" icon=false}
# ``MaxwellBoltzmannVelocityDistribution`` -- Struct
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.MaxwellBoltzmannVelocityDistribution
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``MaxwellBoltzmannFluxVelocityDistribution`` -- Struct
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.MaxwellBoltzmannFluxVelocityDistribution
```
:::

### Utility Functions

::: {.callout-note appearance="simple" icon=false}
# ``azimuth`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.azimuth
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``azimuth_cdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.azimuth_cdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``azimuth_pdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.azimuth_pdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``elevation`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.elevation
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``elevation_cdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.elevation_cdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``elevation_pdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.elevation_pdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``speed`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.speed
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``speed_cdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.speed_cdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``speed_pdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.speed_pdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``velocity`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.velocity
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``velocity_cdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.velocity_cdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``velocity_pdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.velocity_pdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``zenith`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.zenith
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``zenith_cdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.zenith_cdf
```
:::

::: {.callout-note appearance="simple" icon=false}
# ``velocity_pdf`` -- Function
```{julia}
#| echo: false
if !isdefined(Main, :ExESS)
include(joinpath(@__DIR__, "..", "..", "..", "exess.jl", "src", "ExESS.jl"))
using .ExESS
end
@doc ExESS.zenith_pdf
```
:::