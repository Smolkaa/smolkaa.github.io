---
title: "2.4 Statistics and the Monte Carlo Method"
---

{{< include /resources/latex/_defs.qmd >}}
{{< include /resources/latex/_symbols.qmd >}}

---


# The Monte Carlo Method

The Monte Carlo method, a pivotal computational technique in various fields, traces its origins to the mid-20th century. It was developed by scientists, notably Stanislaw Ulam and John von Neumann, at the Los Alamos National Laboratory during the Manhattan Project in the 1940s. The name "Monte Carlo" was inspired by the Monte Carlo Casino in Monaco, known for its games of chance and randomness, reflecting the method's reliance on random sampling and probabilistic principles. Initially applied to solve complex mathematical and physical problems related to nuclear physics and neutron diffusion, the Monte Carlo method rapidly expanded its utility to diverse scientific and engineering domains. Its historical significance lies not only in its role during the development of the atomic bomb but also in its enduring impact on modern computational science, enabling the simulation and analysis of intricate systems and processes. [@Barbu2020; @Lemieux2009]

The Monte Carlo method's applicability has transcended its origins and found widespread use across numerous disciplines, including physics, chemistry, engineering, finance, biology, computer graphics, and operations research. In these fields, realistic models often incorporate the assumption that specific components within systems show random behavior. The Monte Carlo simulation method addresses this by leveraging random sampling techniques to study the properties of systems characterized by stochastic components. Specifically, it involves the computer-based simulation of such systems by generating random variables that describe the behavior of their components. Subsequently, samples of the quantities of interest are obtained through this simulated randomness, facilitating statistical inference and analysis. This versatile and probabilistic approach has made the Monte Carlo method an indispensable tool for addressing complex and stochastic problems in various scientific and practical domains. [@Lemieux2009]


## Basics Simulation Setup

Generally speaking, a Monte Carlo simulation is not restricted to any fixed physical system or model but rather describes the method used to simulate the individual problem. Its general structure is presented in @fig-mc_basic, showing that a Monte Carlo simulation only consists of an initialization and a loop. The initialization step involves setting up the system and its components, including the specification of the system's state, the random number generator seed, and setting global parameters, most importantly the number of Monte Carlo steps $N$. The loop then iterates over the $N$ Monte Carlo steps.

{{< include stats_mc/imgs/mc_basic/_mc_basic.qmd >}}

In the context of Monte Carlo simulations, the system under examination is exclusively represented within the iterative process, specifically encapsulated within the Monte Carlo step. This step encompasses various deterministic and probabilistic subsystems, emphasizing the probabilistic aspect inherent to Monte Carlo simulations. While it is unquestionably preferable to solve both the deterministic and probabilistic components of the system analytically, their combination becomes exceedingly complex quite rapidly, necessitating numerical methods. Each Monte Carlo step effectively addresses the system employing probabilistic sampling, engendering not a definitive solution but rather a singular realization of the probabilistic system. As the number of Monte Carlo steps increases, a correspondingly growing quantity of samples is generated. Therefore, collecting these samples enables a comprehensive analysis of the system's statistical properties.

In the context of this work, examples of probabilistic subsystems can be found in many of the underlying physical processes like the energy, velocity, and angle distributions of the various mechanisms in the exosphere and during surface interactions, for example, the section about [Thermal Sorption](/documentation/drivers/thermal_sorption.qmd), as well as the handling of probabilistic events like [photoionization and -dissociation](/documentation/drivers/photoreactions.qmd), [sputtering](), and [Photon and Electron Stimulated Desorption](/documentation/drivers/), to just name a few. Additionally, some parameters of the system are either inherently stochastic (like binding energies) or are implemented as such to either account for their uncertainty or to allow for a more realistic simulation. Examples of the latter are the [surface geometry]() and the [surface temperatures](/documentation/fundamentals/moon.qmd), which are both modeled as random variables. Examples of deterministic systems are all those calculations that can be performed analytically, like the [landing position calculations](/documentation/trajectories/ballistic_trajectories.qmd) of purely ballistic trajectories.



# Statistics

{{< include stats_mc/_statistics.qmd >}}

## Ensemble Averages
{{< include stats_mc/_ensemble_averages.qmd >}}


# Randomness

The randomness of numerical simulations is usually achieved through one (or more) of the implemented random number generators, which are based on deterministic algorithms. These algorithms are designed to produce a sequence of numbers that appear to be random, but are in fact completely determined by the initial value, called the seed. In this work, the standard generator method `xoshiro256++` implemented in the Julia Programming Language has been used [@Blackman2021].





[ ]{.aside}