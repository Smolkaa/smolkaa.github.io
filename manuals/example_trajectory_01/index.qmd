---
title: "Trajectory Calculation"
description: "Julia, Example"
image: orbit.png
author: Alexander Smolka
date: 17 07 23
categories:
  - Julia
  - Example
---

::: {.hidden }
# {{< meta title >}}
:::

---

First, the locally available ExESS package has to be loaded:
```julia
include(joinpath(@__DIR__, "..", "..", "src", "ExESS.jl"))
using .ExESS
```

Next, all required inputs for the trajectory calculation are defined.
If you are unsure about how the function works, you can type `julia> ?trajectory` in the REPL
to get a description of the function and its arguments.

Apart from the key-word arguments, the function requires the following inputs:

* `x0`: Initial position vector in Cartesian coordinates (m)
* `v0`: Initial velocity vector in Cartesian coordinates (m/s)
* `ddx`: Acceleration function (m/s2)

The docstring (see `?trajectory`) shows that these input can be of different types, either
vectors (`AbstractVector`) or positions (`AbstractPosition`). The latter are custom types
defined in the ExESS package to distinguish one three-dimensional in a certain coordinate
space from another. The following example shows how to use the `GlobalCartesianPosition`.

We create a `GlobalCartesianPosition` object with the initial position vector, locate at
`[LUNAR_RADIUS, 0, 0]`, in other words: on the surface of a sphere with radius `LUNAR_RADIUS`.
```julia
x0 = GlobalCartesianPosition(LUNAR_RADIUS, 0, 0)
```

Next, the initial velocity vector is defined. We use the `GlobalCartesianVelocity` type
to define a velocity vector in the same coordinate system as the position vector. Here, we
only use a velocity in the x-direction, with a magnitude of `100 m/s`.
```julia
v0 = GlobalCartesianVelocity(100, 0, 0)
```

Without letting the trajectory calculation run, we can review the initial conditions set.
Both the position and the velocity vector are set in the same coordinate system and have
non-zero components only in the x-direction. For purely gravitational accelerations, the
trajectory should therefore be a straight line in the x-direction.

We can test this assumptions by using the `ddx_lunar_gravity` function, which is a 
predefined acceleration function for the gravitational acceleration of the Moon. It
already has the Moon's mass and radius defined, so we can use it directly as is. Note
that it assumes that every other acceleration is negligible, which might not be true
for charged particles in electro-magnetic fields.
```julia
ddx = ddx_lunar_gravity
```

Finally, we have all the required inputs to calculate the trajectory. Let's call the
function and save the solution in a variable called `traj`.
```julia
traj = trajectory(x0, v0, ddx)
```
