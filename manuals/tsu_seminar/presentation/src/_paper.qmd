## About the Presentation {auto-animate=true}
#### The Lunar Exosphere Simulation Framework

</br>

![](../imgs/paper.png){.shadowbox}




## About the Presentation {auto-animate=true}
#### The Lunar Exosphere Simulation Framework

:::: {.columns}

::: {.column width=40%}

**Highlights**

* Monte-Carlo simulation
* Implementation in Julia Language
* Quasi-steady 2D model
* Neutral exosphere of $\ce{H}$, $\ce{H2}$, $\ce{OH}$, and $\ce{H2O}$
* Solar wind is the only source of hydrogen atoms
* Conversion reactions to connect the different species
* All relevant processes included as distributions

:::

::: {.column width=60%}
![](../imgs/paper.png){.shadowbox width=100%}
:::

::::

</br>
</br>

::: {.fragment style="font-size: 1.5em"}
::: {.callout-note appearance="minimal" icon=false}
# Goal of the Research
{{< fa check >}} &ensp; Build a framework to show the general influence of conversion reactions on the lunar hydrogen exosphere. Include uncertain pathways for particles with probability distributions. 

{{< fa xmark >}} &ensp; Not predict the exact density of the lunar exosphere!
:::
:::



## About the Presentation {transition="fade-in"}
#### The Lunar Exosphere Simulation Framework -- Why Julia

![](../imgs/julia_benchmark.svg){.absolute .shadowbox top=150 left=0 width=875}

::: {.fragment}
::: {.absolute top=250 left=100 width=550 style="background: rgba(220, 220, 220, 0.5); padding-left: 10px;"}
**Personal Reasons for Julia:**

* Similar to Matlab and Python (easy to learn)
* Great community in the scientific computing field
  - especially great ODE solvers
* Open-source & easy to get started
* Great for teaching
:::
:::

:::: {.columns}
::: {.column width=72%}
:::

::: {.column width=28%}

</br>

![](../imgs/julia-logo.svg){width=175}

</br>

**Performance and Productivity:**

* Julia designed for high-performance computing.
* JIT compilation for near-native speed.


**Versatility and Flexibility:**

* Handles simulations, machine learning, and data visualization.
* Extensive libraries available.
:::
::::





## About the Presentation {auto-animate=true}
#### The Lunar Exosphere Simulation Framework -- Why Julia

::: {style="font-size: 1.5em"}
```{.julia}
function lunar_surface_temperatures_HURLEY2015(lng::Real, lat::Real)
    if abs(lng) >= pi/2
        a = [444.738, -448.937, 239.668, -63.8844, 8.34064, -0.423502]
        if lng < 0; lng += 2pi; end
        colat = -(lat - pi/2)
        return sum([a[i] * lng^(i-1) for i in 1:6]) + 35 * (sin(colat)-1) 
    end
    return 262*(cos(lng) * cos(lat))^(1/2) + 130
end
```
:::






## About the Presentation {auto-animate=true}
#### The Lunar Exosphere Simulation Framework -- Why Julia

::: {style="font-size: 1.5em"}
```{.julia code-line-numbers="8"}
function lunar_surface_temperatures_HURLEY2015(lng::Real, lat::Real)
    if abs(lng) >= pi/2
        a = [444.738, -448.937, 239.668, -63.8844, 8.34064, -0.423502]
        if lng < 0; lng += 2pi; end
        colat = -(lat - pi/2)
        return sum([a[i] * lng^(i-1) for i in 1:6]) + 35 * (sin(colat)-1) 
    end
    return 262*(cos(lng) * cos(lat))^(1/2) + 130
end
```
:::

</br></br>

:::: {.columns}
::: {.column}
![](../imgs/hurley2015-1.png){.shadowbox}
:::

::: {.column}
:::
::::






## About the Presentation {auto-animate=true}
#### The Lunar Exosphere Simulation Framework -- Why Julia

::: {style="font-size: 1.5em"}
```{.julia code-line-numbers="3-6"}
function lunar_surface_temperatures_HURLEY2015(lng::Real, lat::Real)
    if abs(lng) >= pi/2
        a = [444.738, -448.937, 239.668, -63.8844, 8.34064, -0.423502]
        if lng < 0; lng += 2pi; end
        colat = -(lat - pi/2)
        return sum([a[i] * lng^(i-1) for i in 1:6]) + 35 * (sin(colat)-1) 
    end
    return 262*(cos(lng) * cos(lat))^(1/2) + 130
end
```
:::

</br></br>

:::: {.columns}
::: {.column}
![](../imgs/hurley2015-1.png){.shadowbox}
:::

::: {.column}
![](../imgs/hurley2015-2.png){.shadowbox}
:::
::::





## About the Presentation {auto-animate=true}
#### The Lunar Exosphere Simulation Framework -- Why Julia

::: {style="font-size: 1.5em"}
```{.julia code-line-numbers="|1,10,15,18,21"}
function lunar_surface_temperatures_HURLEY2015(lng::Real, lat::Real)
    if abs(lng) >= pi/2
        a = [444.738, -448.937, 239.668, -63.8844, 8.34064, -0.423502]
        if lng < 0; lng += 2pi; end
        colat = -(lat - pi/2)
        return sum([a[i] * lng^(i-1) for i in 1:6]) + 35 * (sin(colat)-1) 
    end
    return 262*(cos(lng) * cos(lat))^(1/2) + 130
end
function lunar_surface_temperatures_HURLEY2015(lngs::AbstractVector, lats::AbstractVector; matrix=true)
    return matrix ? 
        [lunar_surface_temperatures_HURLEY2015(lng, lat) for lng in lngs, lat in lats] :
        [lunar_surface_temperatures_HURLEY2015(lngs[i], lats[i]) for i in eachindex(lngs)]
end
function lunar_surface_temperatures_HURLEY2015(xs::GlobalSphericalPosition)
    return lunar_surface_temperatures_HURLEY2015(xs.theta, xs.phi)
end
function lunar_surface_temperatures_HURLEY2015(XS::Vector{GlobalSphericalPosition{T}}) where {T}
    return lunar_surface_temperatures_HURLEY2015.(XS)
end
function lunar_surface_temperatures_HURLEY2015(grid::AbstractGrid)
    return lunar_surface_temperatures_HURLEY2015.(surfacecoords(grid))
end
```
:::